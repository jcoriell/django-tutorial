[
  {
    "objectID": "01 Creating a virtual environment.html",
    "href": "01 Creating a virtual environment.html",
    "title": "Django Tutorial",
    "section": "",
    "text": "Note: Any commands in this tutorial assume you’re using a bash like shell (such as bash, zsh, or gitbash).\nA virtual environment is a tool that helps keep dependencies required by different projects in separate places. It solves the “dependency hell” problem and allows you to work with different versions of Python and packages without conflicts.\n\n\n\nNavigate to your project directory: Use cd to move into the directory where you want to create your virtual environment.\ncd path/to/your/project\nCreate the virtual environment: Run the following command to create the virtual environment. Here, .venv is the name of the virtual environment folder. You can replace .venv with any name you prefer.\npython -m venv .venv\n\n\n\n\nTo activate the virtual environment, run one of the following based on your system.\nOn Windows machines:\n.venv/Scripts/activate\nOn macOS and Linux machines:\nsource .venv/bin/activate\nOnce the environment is activated, your terminal prompt will change, indicating you’re now working within the virtual environment. You will see something like this:\n(.venv) user@machine:~/project$\n\n\n\nNow that your virtual environment is activated, you can install any Python packages using pip, and they will be isolated to this environment.\npip install &lt;package_name&gt;\n\n\n\nIf at any point you care to deactivate the virtual, you can run, for now, leave it active.\ndeactivate",
    "crumbs": [
      "Creating a Virtual Environment"
    ]
  },
  {
    "objectID": "01 Creating a virtual environment.html#tutorial-how-to-create-and-activate-a-python-virtual-environment",
    "href": "01 Creating a virtual environment.html#tutorial-how-to-create-and-activate-a-python-virtual-environment",
    "title": "Django Tutorial",
    "section": "",
    "text": "Note: Any commands in this tutorial assume you’re using a bash like shell (such as bash, zsh, or gitbash).\nA virtual environment is a tool that helps keep dependencies required by different projects in separate places. It solves the “dependency hell” problem and allows you to work with different versions of Python and packages without conflicts.\n\n\n\nNavigate to your project directory: Use cd to move into the directory where you want to create your virtual environment.\ncd path/to/your/project\nCreate the virtual environment: Run the following command to create the virtual environment. Here, .venv is the name of the virtual environment folder. You can replace .venv with any name you prefer.\npython -m venv .venv\n\n\n\n\nTo activate the virtual environment, run one of the following based on your system.\nOn Windows machines:\n.venv/Scripts/activate\nOn macOS and Linux machines:\nsource .venv/bin/activate\nOnce the environment is activated, your terminal prompt will change, indicating you’re now working within the virtual environment. You will see something like this:\n(.venv) user@machine:~/project$\n\n\n\nNow that your virtual environment is activated, you can install any Python packages using pip, and they will be isolated to this environment.\npip install &lt;package_name&gt;\n\n\n\nIf at any point you care to deactivate the virtual, you can run, for now, leave it active.\ndeactivate",
    "crumbs": [
      "Creating a Virtual Environment"
    ]
  },
  {
    "objectID": "03 Creating Apps.html",
    "href": "03 Creating Apps.html",
    "title": "Django Tutorial",
    "section": "",
    "text": "You can think of “app” in this context as a single unit of your project and the project as a whole as the application you’re developing. You can subdivide the various parts of your project into different “apps”. For example, if modeling a university, you might have an app called “courses” and an app called “students” where you can handle the various ways you can programatically interact with a “Course” and the various ways you can programatically interact with a “Student”.\n\nCreate an “App” for your project. It is recommended to use lowercase when naming the apps. The following lines create two apps.\ndjango-admin startapp courses\ndjango-admin startapp students\nIf you explore the folders that these commands ran, you will find a variety of files. A brief explanation of each is provided here. We will mostly work in the urls.py, views.py, and models.py files for this tutorial.\n\nadmin.py - for customizing the built-in admin tools provided by django\napps.py - for defining the configuration of the app\nmodels.py - for defining your database models\ntests.py - for defining tests\nurls.py - for specifying paths to different views\nviews.py - for defining the functions you want the urls to execute\n\nOnce you’ve created an app, go to the tutorial/settings.py file to add those apps to the project. To add the app to the project, find the list called INSTALLED_APPS. At the end of the list, add the name of your app’s folder.\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'courses', # this was added\n    'students', # this was added\n]",
    "crumbs": [
      "Creating Apps"
    ]
  },
  {
    "objectID": "03 Creating Apps.html#creating-an-app-in-django",
    "href": "03 Creating Apps.html#creating-an-app-in-django",
    "title": "Django Tutorial",
    "section": "",
    "text": "You can think of “app” in this context as a single unit of your project and the project as a whole as the application you’re developing. You can subdivide the various parts of your project into different “apps”. For example, if modeling a university, you might have an app called “courses” and an app called “students” where you can handle the various ways you can programatically interact with a “Course” and the various ways you can programatically interact with a “Student”.\n\nCreate an “App” for your project. It is recommended to use lowercase when naming the apps. The following lines create two apps.\ndjango-admin startapp courses\ndjango-admin startapp students\nIf you explore the folders that these commands ran, you will find a variety of files. A brief explanation of each is provided here. We will mostly work in the urls.py, views.py, and models.py files for this tutorial.\n\nadmin.py - for customizing the built-in admin tools provided by django\napps.py - for defining the configuration of the app\nmodels.py - for defining your database models\ntests.py - for defining tests\nurls.py - for specifying paths to different views\nviews.py - for defining the functions you want the urls to execute\n\nOnce you’ve created an app, go to the tutorial/settings.py file to add those apps to the project. To add the app to the project, find the list called INSTALLED_APPS. At the end of the list, add the name of your app’s folder.\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'courses', # this was added\n    'students', # this was added\n]",
    "crumbs": [
      "Creating Apps"
    ]
  },
  {
    "objectID": "07 Creating a Form.html",
    "href": "07 Creating a Form.html",
    "title": "Django Tutorial",
    "section": "",
    "text": "In this portion of the tutorial, you will create a form in django, a template to represent that form, a view, and connect the view to the url.\n\n\n\nIn the students/ app directory, create a file called forms.py.\nIn students/forms.py add the following code. We are creating a form by specifying the various elements of that form. We will be able to reference this form in the views file and a template later.\n\nfrom django import forms\n\n\nclass CreateStudentForm(forms.Form):\n    first_name = forms.CharField(max_length=255, label=\"First Name\")\n    last_name = forms.CharField(max_length=255, label=\"Last Name\")\n    email = forms.EmailField(label=\"Email\")\n\n\n\n\nIn the students/templates/ directory, create the following three files:\n\ncreate_student_form.html with the following code:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Create Student Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Create Student&lt;/h1&gt;\n\n    &lt;form method=\"post\" action=\"\"&gt;\n        {% csrf_token %}\n\n        &lt;div&gt;\n            &lt;label for=\"id_first_name\"&gt;First Name:&lt;/label&gt;\n            {{ form.first_name }}\n        &lt;/div&gt;\n\n        &lt;div&gt;\n            &lt;label for=\"id_last_name\"&gt;Last Name:&lt;/label&gt;\n            {{ form.last_name }}\n        &lt;/div&gt;\n\n        &lt;div&gt;\n            &lt;label for=\"id_email\"&gt;Email:&lt;/label&gt;\n            {{ form.email }}\n        &lt;/div&gt;\n\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\nerror_page.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Error Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;Sorry, an error occurred.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nsuccess_page.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Success Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Success&lt;/h1&gt;\n    &lt;p&gt;The student was created!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\nNavigate to students/views.py and modify the imports so that we have imported the newly created form from forms.\nfrom django.shortcuts import render\nfrom django.views import View\nfrom . import models\nfrom . import forms  # this line is new\nAdd a view to handle the displaying of the form and the processing of the form. The displaying of the form will be done via a GET request and the processing of the form will be done via a POST request.\nclass CreateStudent(View):\n\ndef get(self, request):\n    \"\"\"A GET request to pass the form to the frontend\"\"\"\n\n    # create the form with no values filled in\n    form = forms.CreateStudentForm()\n\n    # pass the form to the create_student_form.html template and render it\n    return render(request, 'create_student_form.html', {'form': form})\n\n\ndef post(self, request):\n    \"\"\"A POST request will happen when someone submits the form\"\"\"\n\n    # create the form from the data that comes with the POST request\n    form = forms.CreateStudentForm(request.POST)\n    if form.is_valid(): # validate the form (if you add any validation)\n        # Create the student\n        student = models.Student(\n            first_name=form.cleaned_data[\"first_name\"], \n            last_name=form.cleaned_data[\"last_name\"], \n            email=form.cleaned_data[\"email\"]\n        )\n        # Committ the student to the database\n        student.save()\n\n        # render the success page\n        return render(request, \"success_page.html\")\n\n    # render the error page\n    return render(request, \"error_page.html\")\n\n\n\n\n\nNavigate to students/urls.py and modify the urlpatters list to reflect the following:\nurlpatterns = [\n    path(\"all/\", views.GetAllStudents.as_view(), name=\"all\"),\n    path(\"new/\", views.CreateStudent.as_view(), name=\"new\")  # this is new\n]",
    "crumbs": [
      "Creating a Form"
    ]
  },
  {
    "objectID": "07 Creating a Form.html#creating-a-form",
    "href": "07 Creating a Form.html#creating-a-form",
    "title": "Django Tutorial",
    "section": "",
    "text": "In this portion of the tutorial, you will create a form in django, a template to represent that form, a view, and connect the view to the url.\n\n\n\nIn the students/ app directory, create a file called forms.py.\nIn students/forms.py add the following code. We are creating a form by specifying the various elements of that form. We will be able to reference this form in the views file and a template later.\n\nfrom django import forms\n\n\nclass CreateStudentForm(forms.Form):\n    first_name = forms.CharField(max_length=255, label=\"First Name\")\n    last_name = forms.CharField(max_length=255, label=\"Last Name\")\n    email = forms.EmailField(label=\"Email\")\n\n\n\n\nIn the students/templates/ directory, create the following three files:\n\ncreate_student_form.html with the following code:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Create Student Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Create Student&lt;/h1&gt;\n\n    &lt;form method=\"post\" action=\"\"&gt;\n        {% csrf_token %}\n\n        &lt;div&gt;\n            &lt;label for=\"id_first_name\"&gt;First Name:&lt;/label&gt;\n            {{ form.first_name }}\n        &lt;/div&gt;\n\n        &lt;div&gt;\n            &lt;label for=\"id_last_name\"&gt;Last Name:&lt;/label&gt;\n            {{ form.last_name }}\n        &lt;/div&gt;\n\n        &lt;div&gt;\n            &lt;label for=\"id_email\"&gt;Email:&lt;/label&gt;\n            {{ form.email }}\n        &lt;/div&gt;\n\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\nerror_page.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Error Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;Sorry, an error occurred.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nsuccess_page.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Success Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Success&lt;/h1&gt;\n    &lt;p&gt;The student was created!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\nNavigate to students/views.py and modify the imports so that we have imported the newly created form from forms.\nfrom django.shortcuts import render\nfrom django.views import View\nfrom . import models\nfrom . import forms  # this line is new\nAdd a view to handle the displaying of the form and the processing of the form. The displaying of the form will be done via a GET request and the processing of the form will be done via a POST request.\nclass CreateStudent(View):\n\ndef get(self, request):\n    \"\"\"A GET request to pass the form to the frontend\"\"\"\n\n    # create the form with no values filled in\n    form = forms.CreateStudentForm()\n\n    # pass the form to the create_student_form.html template and render it\n    return render(request, 'create_student_form.html', {'form': form})\n\n\ndef post(self, request):\n    \"\"\"A POST request will happen when someone submits the form\"\"\"\n\n    # create the form from the data that comes with the POST request\n    form = forms.CreateStudentForm(request.POST)\n    if form.is_valid(): # validate the form (if you add any validation)\n        # Create the student\n        student = models.Student(\n            first_name=form.cleaned_data[\"first_name\"], \n            last_name=form.cleaned_data[\"last_name\"], \n            email=form.cleaned_data[\"email\"]\n        )\n        # Committ the student to the database\n        student.save()\n\n        # render the success page\n        return render(request, \"success_page.html\")\n\n    # render the error page\n    return render(request, \"error_page.html\")\n\n\n\n\n\nNavigate to students/urls.py and modify the urlpatters list to reflect the following:\nurlpatterns = [\n    path(\"all/\", views.GetAllStudents.as_view(), name=\"all\"),\n    path(\"new/\", views.CreateStudent.as_view(), name=\"new\")  # this is new\n]",
    "crumbs": [
      "Creating a Form"
    ]
  },
  {
    "objectID": "02 Installing Django and Starting a Project.html",
    "href": "02 Installing Django and Starting a Project.html",
    "title": "Django Tutorial",
    "section": "",
    "text": "Install Django into your virtual environment using pip\npip install django\nCreate a Django project using the following command. Note the final character is a dot, this will prevent it from creating a new folder and place needed files in the current folder. You can replace the word tutorial with the name of your project.\ndjango-admin startproject tutorial .   # note the dot here\nYou should have noticed a folder with the name of your project is created (tutorial in this case), and a file named manage.py is created.\nThe folder called tutorial can be thought of as the settings folder for this project. It will contain special information about the project as a whole.\nThe file called manage.py is used as a window into the django project. We can run this file with other arguments to start the server, make changes to the database, amongst other things.\nNow let’s make sure the server runs. You can run the server using the following command.\npython manage.py runserver\nYou might get some red text that says something along the lines of You have 18 unapplied migrations.... Ignore this for now.\nOpen a web browser and navigate to http://127.0.0.1:8000. You should see a success message there. To kill the server at any point, just hit ctrl+c in the terminal started it in, or destroy the terminal.",
    "crumbs": [
      "Installing Django and Starting a Project"
    ]
  },
  {
    "objectID": "02 Installing Django and Starting a Project.html#how-to-install-django-into-your-virtual-environment",
    "href": "02 Installing Django and Starting a Project.html#how-to-install-django-into-your-virtual-environment",
    "title": "Django Tutorial",
    "section": "",
    "text": "Install Django into your virtual environment using pip\npip install django\nCreate a Django project using the following command. Note the final character is a dot, this will prevent it from creating a new folder and place needed files in the current folder. You can replace the word tutorial with the name of your project.\ndjango-admin startproject tutorial .   # note the dot here\nYou should have noticed a folder with the name of your project is created (tutorial in this case), and a file named manage.py is created.\nThe folder called tutorial can be thought of as the settings folder for this project. It will contain special information about the project as a whole.\nThe file called manage.py is used as a window into the django project. We can run this file with other arguments to start the server, make changes to the database, amongst other things.\nNow let’s make sure the server runs. You can run the server using the following command.\npython manage.py runserver\nYou might get some red text that says something along the lines of You have 18 unapplied migrations.... Ignore this for now.\nOpen a web browser and navigate to http://127.0.0.1:8000. You should see a success message there. To kill the server at any point, just hit ctrl+c in the terminal started it in, or destroy the terminal.",
    "crumbs": [
      "Installing Django and Starting a Project"
    ]
  },
  {
    "objectID": "06 Creating a View.html",
    "href": "06 Creating a View.html",
    "title": "Django Tutorial",
    "section": "",
    "text": "In this file, you will be shown how to create a class based view. There are also function based views in django which is not covered here. Note that there are also shortcuts to accomplish much of what we do here instead of doing it manually.\n\n\n\nNavigate to the students/ directory and create a folder called templates. This folder will contain the HTML files that we want to render in our web browser.\nInside of the students/templates/ folder, create an html file called all_students.html. Place the following code inside of it. Django has its own templating lanaguage, so if you’re familiar with HTML, you will see some notations that may not make sense. Usage of the templating language is usually marked with double curly braces { somthing in here } or curly braces and a percentage symbol {% something in here %}.\nThe values written in these constructs will typically be passed to this html file via context.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Student List&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Student List&lt;/h1&gt;\n\n    &lt;ul&gt;\n        {% for student in students %}\n            &lt;li&gt;{{ student.first_name }} {{ student.last_name }}&lt;/li&gt;\n        {% empty %}\n            &lt;li&gt;No students available.&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\nNow navigate to students/views.py and modify the imports as shown:\nfrom django.shortcuts import render\nfrom django.views import View\nfrom . import models\nCreate a class called GetAllStudents that inherits from the django View class. We make a query to the database in get() method of this class and then return a rendering of an html file that has access to some context we pass it. Note that in the context {'students': students} the key to this dictionary needs to match the reference in the html file. The reference in the html file is in the for loop {% for student in students %}\n\nclass GetAllStudents(View):\n\n    def get(self, request):  \n        # this takes in self since it is a method \n        # and a second parameter will be passed in that represents the HTTP request that was made\n        # We don't use either in this method, but we still need to provide the parameters\n\n        # make a request to the database for all of the student objects\n        students = models.Student.objects.all()\n\n        # return a rendering of the all_students.html file with the context {\"students\": students}\n        return render(request, 'all_students.html', {'students': students})\n\n\n\n\n\nNavigate to students/urls.py and make the following addition to the urlpatterns list and the imports. Notice how we make a reference to the view we created in the views.py file.\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # the endpoint is 127.0.0.1:8000/student/all/ since we included this file in `tutorial/urls.py`\n    path(\"all/\", views.GetAllStudents.as_view(), name=\"all\"),\n]\nTo trigger this view, we need to navigate to http://127.0.0.1:8000/student/all/ while the server is running. At this point, it should show that there are no students created.",
    "crumbs": [
      "Creating a View"
    ]
  },
  {
    "objectID": "06 Creating a View.html#creating-a-view",
    "href": "06 Creating a View.html#creating-a-view",
    "title": "Django Tutorial",
    "section": "",
    "text": "In this file, you will be shown how to create a class based view. There are also function based views in django which is not covered here. Note that there are also shortcuts to accomplish much of what we do here instead of doing it manually.\n\n\n\nNavigate to the students/ directory and create a folder called templates. This folder will contain the HTML files that we want to render in our web browser.\nInside of the students/templates/ folder, create an html file called all_students.html. Place the following code inside of it. Django has its own templating lanaguage, so if you’re familiar with HTML, you will see some notations that may not make sense. Usage of the templating language is usually marked with double curly braces { somthing in here } or curly braces and a percentage symbol {% something in here %}.\nThe values written in these constructs will typically be passed to this html file via context.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Student List&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Student List&lt;/h1&gt;\n\n    &lt;ul&gt;\n        {% for student in students %}\n            &lt;li&gt;{{ student.first_name }} {{ student.last_name }}&lt;/li&gt;\n        {% empty %}\n            &lt;li&gt;No students available.&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\nNow navigate to students/views.py and modify the imports as shown:\nfrom django.shortcuts import render\nfrom django.views import View\nfrom . import models\nCreate a class called GetAllStudents that inherits from the django View class. We make a query to the database in get() method of this class and then return a rendering of an html file that has access to some context we pass it. Note that in the context {'students': students} the key to this dictionary needs to match the reference in the html file. The reference in the html file is in the for loop {% for student in students %}\n\nclass GetAllStudents(View):\n\n    def get(self, request):  \n        # this takes in self since it is a method \n        # and a second parameter will be passed in that represents the HTTP request that was made\n        # We don't use either in this method, but we still need to provide the parameters\n\n        # make a request to the database for all of the student objects\n        students = models.Student.objects.all()\n\n        # return a rendering of the all_students.html file with the context {\"students\": students}\n        return render(request, 'all_students.html', {'students': students})\n\n\n\n\n\nNavigate to students/urls.py and make the following addition to the urlpatterns list and the imports. Notice how we make a reference to the view we created in the views.py file.\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # the endpoint is 127.0.0.1:8000/student/all/ since we included this file in `tutorial/urls.py`\n    path(\"all/\", views.GetAllStudents.as_view(), name=\"all\"),\n]\nTo trigger this view, we need to navigate to http://127.0.0.1:8000/student/all/ while the server is running. At this point, it should show that there are no students created.",
    "crumbs": [
      "Creating a View"
    ]
  },
  {
    "objectID": "05 Creating a Model.html",
    "href": "05 Creating a Model.html",
    "title": "Django Tutorial",
    "section": "",
    "text": "Creating a Model\n\nIn the students app, let’s create a template for what it means to be a student. This “template” will be the definition of a student for our database. Navigate to the students/models.py and modify the code as follows:\nfrom django.db import models\n\nclass Student(models.Model):\n\n    first_name = models.CharField(max_length=255, null=True)\n    last_name = models.CharField(max_length=255, null=True)\n    email = models.EmailField(null=True)\nNotice we added a class for Student. This class inherits from django’s Model class. What we typically think of as class variables in python can be used to define attributes of a student. So in this case, student’s have first names, last names, and emails.\nEach attribute is given a type from the django models module as well. Without diving into too much detail, we are claiming the first and last names should be CharFields, while the email is an EmailField. There are lots of different types that come with django that you can use depending on what you might need. Certain types come with built in feature (such as email validation for the EmailField).\nOne additional note, the argument null=True allows a field to not be required. This is typically not desired from a data point of view and can be considered bad practice. However, for the sake of learning django and experiencing fewer errors as a newbie, this can help us.\nNow that we have made changes to a model, we need to make our database reflect these changes. This is a two step process: first you make the migrations, then you migrate.\n\n\nMaking migrations\nA migration is a set of instructions on how the database should be modified from its current state to the state reflected in the models. To create the instructions we run the following command:\npython manage.py makemigrations\n\n\nMigrating\nMigrating is the process of applying the instructions that were created in the previous step. This will alter the database. To migrate, run the following command:\npython manage.py migrate\n\n\nThe database\nIf you haven’t noticed it yet, there should be a db.sqlite3 file at the root of your project directory. This is your database. There are applications that allow you to explore this file. One such application is a VS code extension SQLite3 Editor. If exploring with another application, just use caution when editing the database. I recommend not by passing django to make edits unless you know what you’re doing.\nIn production, you would want to use a real database, not an sqlite3 file. However, for in-class projects this is sufficient and will work great.",
    "crumbs": [
      "Creating a Model"
    ]
  },
  {
    "objectID": "04 Creating URLs.html",
    "href": "04 Creating URLs.html",
    "title": "Django Tutorial",
    "section": "",
    "text": "Creating URLs\n\nGo to each app you created, and create a file called urls.py. Once this is created your file directory will probably look like the following:\n- courses/\n    - __pycache__/\n    - migrations/\n    - __init__.py\n    - admin.py\n    - models.py\n    - tests.py\n    - urls.py  # this was added\n    - views.py\n- students/\n    - __pycache__/\n    - migrations/\n    - __init__.py\n    - admin.py\n    - models.py\n    - tests.py\n    - urls.py  # this was added\n    - views.py\nInside each of these newly created urls.py files, add the following code. This is where we will define url paths specific to this app.\nfrom django.urls import path\nurlpatterns = [\n\n]\nUnder the project settings folder (named tutorial in this tutorial), find the file named urls.py. This file should already exist, so you do not need to create it.\nIn this file tutorial/urls.py, modify the import statements so that we have the following:\nfrom django.contrib import admin\nfrom django.urls import path, include  # the function include was added to the existing code\nNow, find the list named urlpatterns. Add a second and third “path” by modifying this list to include urls from your other apps.\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('student/', include('students.urls')),  # the string in the inlcude function has to match your app name\n    path('course/', include('courses.urls')),   # the first argument of path does not need to match the name of the app\n]\nThe first argument of path() will be the url that follows the domain in order to access resources within an app. For example, if my website is hosted at www.example.com, then www.example.com/student/ will let me access resources connected to the students app. Note that if I would have used s/ as the path, then that would let me access the students app instead.\nThe include() function takes in a Pythonic filepath that points to the file called urls.py inside of a specific app. As an example, to get from the manage.py file to the urls.py inside of the students app, the Pythonic filepath is students.urls.\nIf your server is not still running, let’s ensure our server still runs by running python manage.py runserver. Once it is running, navigate to http://127.0.0.1:8000. Hopefully you get a Page not found (404) error where it lists the possible urls for your site.",
    "crumbs": [
      "Creating URL Paths"
    ]
  }
]